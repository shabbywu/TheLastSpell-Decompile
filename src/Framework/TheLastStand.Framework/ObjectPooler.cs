using System;
using System.Collections.Generic;
using UnityEngine;

namespace TheLastStand.Framework;

public class ObjectPooler : SingletonBehaviour<ObjectPooler>
{
	[Serializable]
	public class PreloadedAsset : ISerializationCallbackReceiver
	{
		[SerializeField]
		private string objectPoolName = string.Empty;

		[SerializeField]
		private GameObject gameObjectPrefab;

		[SerializeField]
		private int amountToPreload = 20;

		[SerializeField]
		[Tooltip("Set it to null to generate transform by ObjectPooler")]
		private Transform parent;

		public int AmountToPreload => amountToPreload;

		public GameObject GameObjectPrefab => gameObjectPrefab;

		public string ObjectPoolName => objectPoolName;

		public Transform Parent => parent;

		public void OnAfterDeserialize()
		{
			FixFields();
		}

		public void OnBeforeSerialize()
		{
			FixFields();
		}

		private void FixFields()
		{
			if (amountToPreload < 1)
			{
				amountToPreload = 1;
			}
		}
	}

	private class ObjectPool
	{
		private GameObject refPooledObject;

		private List<GameObject> pooledObjects = new List<GameObject>();

		private Transform parent;

		public ObjectPool(Transform parent, GameObject gameObject)
		{
			this.parent = parent;
			refPooledObject = gameObject;
		}

		public void AddGameObject(GameObject gameObject, int instancesCount = 1)
		{
			for (int i = 0; i < instancesCount; i++)
			{
				GameObject val = Object.Instantiate<GameObject>(gameObject, parent);
				val.SetActive(false);
				pooledObjects.Add(val);
			}
		}

		public void Clear()
		{
			foreach (GameObject pooledObject in pooledObjects)
			{
				Object.Destroy((Object)(object)pooledObject);
			}
			pooledObjects.Clear();
		}

		public GameObject GetGameObject(GameObject specificGameObject, Transform specificParent = null)
		{
			pooledObjects.RemoveAll((GameObject o) => (Object)(object)o == (Object)null);
			foreach (GameObject pooledObject in pooledObjects)
			{
				if (!pooledObject.activeSelf)
				{
					pooledObject.SetActive(true);
					return pooledObject;
				}
			}
			GameObject val = (((Object)(object)specificGameObject != (Object)null) ? specificGameObject : refPooledObject);
			Transform val2 = (((Object)(object)specificParent != (Object)null) ? specificParent : parent);
			GameObject val3 = (((Object)(object)val2 == (Object)null) ? Object.Instantiate<GameObject>(val) : Object.Instantiate<GameObject>(val, val2));
			pooledObjects.Add(val3);
			return val3;
		}

		public void SetPoolAsParent(GameObject gameObject)
		{
			if ((Object)(object)parent == (Object)null)
			{
				Debug.LogWarning((object)("It's impossible to to send back this object " + ((Object)gameObject).name + " to his pool parent because the pool doesn't have a parent."));
				return;
			}
			gameObject.transform.SetParent(parent);
			gameObject.SetActive(false);
		}
	}

	[SerializeField]
	private List<PreloadedAsset> miscellaneousAssets = new List<PreloadedAsset>();

	[Space(5f)]
	[SerializeField]
	private List<PreloadedAsset> feedbackAssets = new List<PreloadedAsset>();

	[Space(5f)]
	[SerializeField]
	private List<PreloadedAsset> soundAssets = new List<PreloadedAsset>();

	[Space(5f)]
	[SerializeField]
	private List<PreloadedAsset> viewAssets = new List<PreloadedAsset>();

	private Dictionary<string, ObjectPool> objectPools = new Dictionary<string, ObjectPool>();

	private List<GameObject> autoGeneratedParents = new List<GameObject>();

	public int ObjectPoolsCount => objectPools.Count;

	public static void AddGameObjectToPool(string poolName, GameObject gameObject, Transform parent = null, int instancesCount = 1)
	{
		if (!SingletonBehaviour<ObjectPooler>.Instance.objectPools.ContainsKey(poolName))
		{
			parent = GetFinalParent(parent, poolName);
			SingletonBehaviour<ObjectPooler>.Instance.objectPools[poolName] = new ObjectPool(parent, gameObject);
		}
		SingletonBehaviour<ObjectPooler>.Instance.objectPools[poolName].AddGameObject(gameObject, instancesCount);
	}

	public static T GetPooledComponent<T>(string poolName, T component, Transform parent = null, bool dontSetParent = false) where T : Component
	{
		return GetPooledGameObject(poolName, ((Component)component).gameObject, parent, dontSetParent).GetComponent<T>();
	}

	public static GameObject GetPooledGameObject(string poolName, GameObject gameObject = null, Transform parent = null, bool dontSetParent = false)
	{
		if (!SingletonBehaviour<ObjectPooler>.Instance.objectPools.ContainsKey(poolName))
		{
			if ((Object)(object)gameObject == (Object)null)
			{
				Debug.LogWarning((object)("Pool with name " + poolName + " has not been found but the gameObject passed as parameter is null."));
				return null;
			}
			Debug.LogWarning((object)("Pool with name " + poolName + " has not been found and will be initialized on the fly."));
			AddGameObjectToPool(poolName, gameObject, parent);
		}
		GameObject gameObject2 = SingletonBehaviour<ObjectPooler>.Instance.objectPools[poolName].GetGameObject(gameObject, parent);
		if (!dontSetParent && (Object)(object)parent != (Object)null && (Object)(object)gameObject2 != (Object)null && (Object)(object)gameObject2.transform.parent != (Object)(object)parent)
		{
			gameObject2.transform.SetParent(parent);
		}
		return gameObject2;
	}

	public void Clear()
	{
		foreach (KeyValuePair<string, ObjectPool> objectPool in objectPools)
		{
			objectPool.Value.Clear();
		}
		objectPools.Clear();
		foreach (GameObject autoGeneratedParent in autoGeneratedParents)
		{
			Object.Destroy((Object)(object)autoGeneratedParent);
		}
		autoGeneratedParents.Clear();
		miscellaneousAssets.Clear();
		feedbackAssets.Clear();
		soundAssets.Clear();
		viewAssets.Clear();
		Debug.Log((object)"Object pools cleared!");
	}

	private static Transform GetFinalParent(Transform parent, string poolName)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Expected O, but got Unknown
		if ((Object)(object)parent == (Object)null)
		{
			GameObject val = new GameObject("[Pool] " + poolName);
			val.transform.SetParent(((Component)SingletonBehaviour<ObjectPooler>.Instance).transform);
			parent = val.transform;
			SingletonBehaviour<ObjectPooler>.Instance.autoGeneratedParents.Add(val);
		}
		return parent;
	}

	public static void SetPoolAsParent(GameObject gameObject, string poolName)
	{
		if (!SingletonBehaviour<ObjectPooler>.Instance.objectPools.ContainsKey(poolName))
		{
			Debug.LogWarning((object)("Pool with name " + poolName + " has not been found, it's impossible to to send back this object " + ((Object)gameObject).name + " to his pool parent."));
		}
		else
		{
			SingletonBehaviour<ObjectPooler>.Instance.objectPools[poolName].SetPoolAsParent(gameObject);
		}
	}

	private void Awake()
	{
		PreloadAssets();
	}

	private void PreloadAssets()
	{
		for (int num = miscellaneousAssets.Count - 1; num >= 0; num--)
		{
			PreloadedAsset preloadedAsset = miscellaneousAssets[num];
			AddGameObjectToPool(preloadedAsset.ObjectPoolName, preloadedAsset.GameObjectPrefab, preloadedAsset.Parent, preloadedAsset.AmountToPreload);
		}
		for (int num2 = feedbackAssets.Count - 1; num2 >= 0; num2--)
		{
			PreloadedAsset preloadedAsset = feedbackAssets[num2];
			AddGameObjectToPool(preloadedAsset.ObjectPoolName, preloadedAsset.GameObjectPrefab, preloadedAsset.Parent, preloadedAsset.AmountToPreload);
		}
		for (int num3 = soundAssets.Count - 1; num3 >= 0; num3--)
		{
			PreloadedAsset preloadedAsset = soundAssets[num3];
			AddGameObjectToPool(preloadedAsset.ObjectPoolName, preloadedAsset.GameObjectPrefab, preloadedAsset.Parent, preloadedAsset.AmountToPreload);
		}
		for (int num4 = viewAssets.Count - 1; num4 >= 0; num4--)
		{
			PreloadedAsset preloadedAsset = viewAssets[num4];
			AddGameObjectToPool(preloadedAsset.ObjectPoolName, preloadedAsset.GameObjectPrefab, preloadedAsset.Parent, preloadedAsset.AmountToPreload);
		}
	}

	[ContextMenu("ClearPools")]
	public void ClearPools()
	{
		if (Application.isPlaying && SingletonBehaviour<ObjectPooler>.Instance.ObjectPoolsCount > 0)
		{
			SingletonBehaviour<ObjectPooler>.Instance.Clear();
		}
	}
}
