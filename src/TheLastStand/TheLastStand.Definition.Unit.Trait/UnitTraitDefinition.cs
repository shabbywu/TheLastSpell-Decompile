using System;
using System.Collections.Generic;
using System.Globalization;
using System.Xml.Linq;
using TPLib.Localization;
using TheLastStand.Definition.Item;
using TheLastStand.Framework.Extensions;
using TheLastStand.Framework.Serialization;
using TheLastStand.View.Unit.Stat;
using UnityEngine;

namespace TheLastStand.Definition.Unit.Trait;

public class UnitTraitDefinition : Definition
{
	public static class Constants
	{
		public const string BadNbOutlined = "BadNbOutlined";

		public const string GoodNbOutlined = "GoodNbOutlined";

		public const string LocEffectDescEquipmentSlot = "UnitTrait_EffectDesc_EquipmentSlot";

		public const string OneArmedId = "One-Armed";
	}

	public class SlotModifier
	{
		private string descriptionOverrideKey = string.Empty;

		public bool AddSlot { get; private set; }

		public int Amount { get; private set; }

		public ItemSlotDefinition.E_ItemSlotId Name { get; private set; }

		public SlotModifier(ItemSlotDefinition.E_ItemSlotId name, int amount, bool addSlot, string descriptionOverrideKey)
		{
			AddSlot = addSlot;
			Amount = amount;
			Name = name;
			this.descriptionOverrideKey = descriptionOverrideKey;
		}

		public string GetDescription()
		{
			if (string.IsNullOrEmpty(descriptionOverrideKey))
			{
				if (Localizer.Exists("UnitTrait_EffectDesc_EquipmentSlot"))
				{
					return string.Format(Localizer.Get("UnitTrait_EffectDesc_EquipmentSlot"), string.Format("<style=\"{0}\">{1}{2}</style>", AddSlot ? "GoodNbOutlined" : "BadNbOutlined", AddSlot ? "+" : "-", Amount), Localizer.Get("CategoryName_" + Name));
				}
				Debug.LogWarning((object)"UnitTraitDefinition.SlotModifier.GetDescription() ERROR: UnitTrait_EffectDesc_EquipmentSlot key not found in localization. Using description generated by default instead.");
				return "<style=\"" + (AddSlot ? "GoodNbOutlined" : "BadNbOutlined") + "\">" + (AddSlot ? "+" : "-") + string.Format("{0}</style> {1} slot{2}", Amount, Name, (Amount > 1) ? "s" : string.Empty);
			}
			if (Localizer.Exists(descriptionOverrideKey))
			{
				return Localizer.Get(descriptionOverrideKey);
			}
			Debug.LogWarning((object)("UnitTraitDefinition.SlotModifier.GetDescription() ERROR: " + descriptionOverrideKey + " not found in localization. Using default description instead."));
			return "<style=\"" + (AddSlot ? "GoodNbOutlined" : "BadNbOutlined") + "\">" + (AddSlot ? "+" : "-") + string.Format("{0}</style> {1} slot{2}", Amount, Name, (Amount > 1) ? "s" : string.Empty);
		}
	}

	public class StatModifier
	{
		private string descriptionOverrideKey = string.Empty;

		public UnitStatDefinition.E_Stat Stat { get; private set; } = UnitStatDefinition.E_Stat.Undefined;


		public float Value { get; private set; }

		public StatModifier(UnitStatDefinition.E_Stat stat, float value, string descriptionOverrideKey)
		{
			Stat = stat;
			Value = value;
			this.descriptionOverrideKey = descriptionOverrideKey;
		}

		public string GetDescription()
		{
			if (string.IsNullOrEmpty(descriptionOverrideKey))
			{
				return Stat.GetValueStylized(Value) + " " + UnitStatDisplay.GetStatIconToString(Stat) + " " + Localizer.Get("UnitStat_Name_" + Stat);
			}
			if (Localizer.Exists(descriptionOverrideKey))
			{
				return Localizer.Get(descriptionOverrideKey);
			}
			Debug.LogWarning((object)("UnitTraitDefinition.StatModifier.GetDescription() ERROR: " + descriptionOverrideKey + " not found in localization. Using default description instead."));
			return Stat.GetValueStylized(Value) + " " + UnitStatDisplay.GetStatIconToString(Stat) + " " + Localizer.Get("UnitStat_Name_" + Stat);
		}
	}

	public int Cost { get; private set; }

	public int Duration { get; private set; }

	public string Id { get; private set; }

	public bool IsBackgroundTrait { get; private set; }

	public List<string> Incompatibilities { get; private set; } = new List<string>();


	public List<StatModifier> StatModifiers { get; private set; } = new List<StatModifier>();


	public List<SlotModifier> AddSlots { get; private set; } = new List<SlotModifier>();


	public string Name => Localizer.Get("UnitTrait_Name_" + Id);

	public List<SlotModifier> RemoveSlots { get; private set; } = new List<SlotModifier>();


	public UnitTraitDefinition(XContainer container)
		: base(container, (Dictionary<string, string>)null)
	{
	}

	public override void Deserialize(XContainer container)
	{
		XElement val = (XElement)(object)((container is XElement) ? container : null);
		XAttribute val2 = val.Attribute(XName.op_Implicit("Id"));
		if (XDocumentExtensions.IsNullOrEmpty(val2))
		{
			Debug.LogError((object)"UnitTraitDefinition must have Id!");
			return;
		}
		Id = val2.Value;
		XAttribute val3 = val.Attribute(XName.op_Implicit("IsBackgroundTrait"));
		if (!XDocumentExtensions.IsNullOrEmpty(val3))
		{
			if (!bool.TryParse(val3.Value, out var result))
			{
				Debug.LogError((object)("UnitTraitDefinition " + Id + " must have a valid IsBackgroundTrait (bool)"));
				return;
			}
			IsBackgroundTrait = result;
		}
		XElement val4 = ((XContainer)val).Element(XName.op_Implicit("Cost"));
		if (val4 == null)
		{
			Debug.LogError((object)("UnitTraitDefinition " + Id + " must have an element Cost"));
			return;
		}
		XAttribute val5 = val4.Attribute(XName.op_Implicit("Value"));
		if (XDocumentExtensions.IsNullOrEmpty(val5))
		{
			Debug.LogError((object)("UnitTraitDefinition " + Id + " Cost must have an attribute Value"));
			return;
		}
		if (!int.TryParse(val5.Value, NumberStyles.Integer, CultureInfo.InvariantCulture, out var result2))
		{
			Debug.LogError((object)("UnitTraitDefinition " + Id + " Cost must have a valid attribute Value (int)"));
			return;
		}
		Cost = result2;
		string empty = string.Empty;
		foreach (XElement item in ((XContainer)val).Elements(XName.op_Implicit("StatModifier")))
		{
			XAttribute val6 = item.Attribute(XName.op_Implicit("Stat"));
			if (val6 == null)
			{
				Debug.LogError((object)"The StatModifier has no stat!");
				continue;
			}
			XAttribute val7 = item.Attribute(XName.op_Implicit("DescOverrideKey"));
			empty = ((val7 != null) ? val7.Value : string.Empty);
			StatModifiers.Add(new StatModifier((UnitStatDefinition.E_Stat)Enum.Parse(typeof(UnitStatDefinition.E_Stat), val6.Value), float.Parse(item.Value, NumberStyles.Float, CultureInfo.InvariantCulture), empty));
		}
		ItemSlotDefinition.E_ItemSlotId e_ItemSlotId = ItemSlotDefinition.E_ItemSlotId.None;
		int num = 0;
		foreach (XElement item2 in ((XContainer)val).Elements(XName.op_Implicit("AddSlot")))
		{
			XAttribute val8 = item2.Attribute(XName.op_Implicit("Slot"));
			if (XDocumentExtensions.IsNullOrEmpty(val8))
			{
				Debug.LogError((object)"The unitTraitDefinition AddSlot has no slot!");
				continue;
			}
			if (!Enum.TryParse<ItemSlotDefinition.E_ItemSlotId>(val8.Value, out var result3))
			{
				Debug.LogError((object)("An unitTraitDefinition has an invalid SlotId " + val8.Value + "!"));
			}
			e_ItemSlotId = result3;
			XAttribute val9 = item2.Attribute(XName.op_Implicit("Amount"));
			num = ((val9 == null) ? 1 : int.Parse(val9.Value));
			XAttribute val10 = item2.Attribute(XName.op_Implicit("DescOverrideKey"));
			empty = ((val10 != null) ? val10.Value : string.Empty);
			AddSlots.Add(new SlotModifier(e_ItemSlotId, num, addSlot: true, empty));
		}
		foreach (XElement item3 in ((XContainer)val).Elements(XName.op_Implicit("RemoveSlot")))
		{
			XAttribute val11 = item3.Attribute(XName.op_Implicit("Slot"));
			if (XDocumentExtensions.IsNullOrEmpty(val11))
			{
				Debug.LogError((object)"The unitTraitDefinition RemoveSlots has no slot!");
				continue;
			}
			if (!Enum.TryParse<ItemSlotDefinition.E_ItemSlotId>(val11.Value, out var result4))
			{
				Debug.LogError((object)("An unitTraitDefinition has an invalid SlotId " + val11.Value + "!"));
			}
			e_ItemSlotId = result4;
			XAttribute val12 = item3.Attribute(XName.op_Implicit("Amount"));
			num = ((val12 == null) ? 1 : int.Parse(val12.Value));
			XAttribute val13 = item3.Attribute(XName.op_Implicit("DescOverrideKey"));
			empty = ((val13 != null) ? val13.Value : string.Empty);
			RemoveSlots.Add(new SlotModifier(e_ItemSlotId, num, addSlot: false, empty));
		}
		XElement val14 = ((XContainer)val).Element(XName.op_Implicit("Duration"));
		if (val14 != null)
		{
			Duration = int.Parse(val14.Value);
		}
		XElement val15 = ((XContainer)val).Element(XName.op_Implicit("Incompatibilities"));
		if (val15 == null)
		{
			return;
		}
		foreach (XElement item4 in ((XContainer)val15).Elements(XName.op_Implicit("UnitTraitDefinition")))
		{
			XAttribute val16 = item4.Attribute(XName.op_Implicit("Id"));
			if (val16 == null)
			{
				Debug.LogError((object)"The unit trait incompatibility has no Id!");
			}
			else
			{
				Incompatibilities.Add(val16.Value);
			}
		}
	}

	public string GetDescription()
	{
		string text = string.Empty;
		for (int i = 0; i < AddSlots.Count; i++)
		{
			text = text + AddSlots[i].GetDescription() + "\n";
		}
		for (int j = 0; j < RemoveSlots.Count; j++)
		{
			text = text + RemoveSlots[j].GetDescription() + "\n";
		}
		for (int k = 0; k < StatModifiers.Count; k++)
		{
			text = text + StatModifiers[k].GetDescription() + "\n";
		}
		return text;
	}
}
